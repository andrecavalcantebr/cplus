/* demo.cplus — Exemplo para testar parser Cplus */

#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>

interface IStartable {
    void start(void *self);
    void stop(void *self);
};

class Device {
    public void power_on(class Device *self);
    void power_off(class Device *self);
    protected int voltage;
    private bool status;
};

class Motor extends Device implements IStartable {
    public void init(Motor *self);
    public void deinit(Motor *self);
    public void start(void *self);
    public void stop(void *self);
    public void set_speed(class Motor *self, int rpm);
    protected int current_rpm;
    private bool enabled;
};

//a palavra-chave public será ignorada no C gerado
public void Device_power_on(class Device *self) {
  self->status = true;
}

//igual a public void power_off()
void Device_power_off(class Device *self) {
  self->status = false;
}

void Motor_init(Motor *self) {
  self->enabled = true;
  self->current_rpm = 0;
}

void Motor_deinit(Motor *self) {
  self->enabled = false;
}

void Motor_start(void *self) {
  //write code what does the motor start
  Motor *m = (Motor *)self;
  printf("Motor started\n");
}

void Motor_stop(void *self) {
  //write code what does the motor stop 
  Motor *m = (Motor *)self;
  printf("Motor stopped\n");
}

void Motor_set_speed(class Motor *self, int rpm) {
  const int factor = 20;
  self->voltage = rpm * factor; 
}

int main() {
  printf("Motor\n");
  Motor _m, *m = &_m;
  
  Device_power_on(m as Device);
  
  m->start(m);
  
  printf("Motor is running...\n");
  
  m->set_speed(m, 10);
  
  m->stop(m);
  
  printf("Motor is running...\n");
  
  Device_power_off(m as Device);
  return 0;
}

