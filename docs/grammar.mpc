/* ============================================================================
 * grammar.mpc â€” Cplus (C23+)
 * Classes, interfaces, sections, methods and fields
 * Compatible with gen_parser (mpca_lang)
 * Generics level 1 (List<int>, Map<K,V>), no nesting yet
 * ========================================================================== */

/* ---- Lexical & trivia ---- */
ws            : /([ \t\r\n]|\/\/[^\n]*\n|\/\*([^*]|\*+[^*/])*\*+\/)*/ ;
letter        : /[A-Za-z_]/ ;
digit         : /[0-9]/ ;
identifier    : <letter> /[A-Za-z0-9_]*/ ;

/* ---- Keywords ---- */
kw_interface  : "interface" ;
kw_class      : "class" ;
kw_public     : "public" ;
kw_private    : "private" ;
kw_protected  : "protected" ;

/* ---- Symbols ---- */
lbrace        : "{" ;
rbrace        : "}" ;
semi          : ";" ;
colon         : ":" ;
lparen        : "(" ;
rparen        : ")" ;
langle        : "<" ;
rangle        : ">" ;
comma         : "," ;

/* ---- Types (level 1 generics) ---- */
type_name     : <identifier> ;
type_args     : <langle> <ws> <type_name> (<ws> <comma> <ws> <type_name>)* <ws> <rangle> ;
type          : <type_name> (<ws> <type_args>)? ;

/* ---- Parameters and members ---- */
param         : <type> <ws> <identifier> ;
param_list    : <param> (<ws> <comma> <ws> <param>)* ;
param_list_opt: (<param_list>)? ;

method_name   : <identifier> ;
method_decl   : <type> <ws> <method_name> <ws> <lparen> <ws> <param_list_opt> <ws> <rparen> <ws> <semi> ;

field_decl    : <type> <ws> <identifier> <ws> <semi> ;
member        : <method_decl> | <field_decl> ;

/* ---- Access sections ---- */
access_kw     : <kw_public> | <kw_private> | <kw_protected> ;
section       : <access_kw> <ws> <colon> <ws> <member>* ;

/* ---- Interface (methods only; optional 'public:' at start) ---- */
interface     : <kw_interface> <ws> <identifier> <ws>
                <lbrace> <ws>
                  (<kw_public> <ws> <colon> <ws>)?
                  <method_decl>* <ws>
                <rbrace> <ws> <semi> ;

/* ---- Class ---- */
class         : <kw_class> <ws> <identifier> <ws>
                <lbrace> <ws>
                  (<section> | <member>)* <ws>
                <rbrace> <ws> <semi> ;

/* ---- Program ---- */
program       : <ws> (<interface> | <class>)+ <ws> ;
