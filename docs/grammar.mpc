program           : /^/ <decl>* /$/ ;

decl              : <typedef_class>
                  | <typedef_interface>
                  | <forward_class>
                  | <forward_interface>
                  | <interface>
                  | <class>
                  | <c_chunk> ;

identifier        : /[A-Za-z_][A-Za-z0-9_]*/ ;

type_qual         : "const" | "volatile" | "restrict" ;

type_name         : <type_qual>* <identifier> <generic_args_opt> <ptr_suffix> ;
generic_args_opt  : ("<" <type_list> ">")? ;
type_list         : <type_name> ("," <type_name>)* ;
ptr_suffix        : ("*")* ;
array_suffix      : ("[" /[0-9]*/ "]")* ;

param_void        : "void" ;

param_list        : (<param_void> | <param> ("," <param>)*)? ;
param             : <type_name> <identifier> ;

interface         : "interface" <identifier> <generic_args_opt> "{" <interface_item>* "}" (";")? ;
interface_item    : <method_sig> ";" | <c_comment> ;
method_sig        : <type_name> <identifier> "(" <param_list> ")" ;

class             : "class" <identifier> <generic_args_opt> <class_tail> "{" <class_item>* "}" (";")? ;
class_tail        : ("extends" <identifier>)? ("implements" <ident_list>)? ;
ident_list        : <identifier> ("," <identifier>)* ;

class_item        : <member_decl> | <c_comment> | <c_pp_line> ;

member_decl       : <access_mods_opt> <storage_mods_opt> <type_name> <identifier> <member_after_name> ;
access_mods_opt   : (<access_kw>)* ;
access_kw         : "public" | "protected" | "private" ;
storage_mods_opt  : ("static")* ;

member_after_name : "(" <param_list> ")" ";" 
                    | <array_suffix> ";"      
                    | ";" ;               

typedef_class     : "typedef" "class" <identifier> <class_tail>
                    "{" <class_item>* "}" <identifier> ";" ;

typedef_interface : "typedef" "interface" <identifier>
                    "{" <interface_item>* "}" <identifier> ";" ;

forward_class     : "class" <identifier> ";" ;
forward_interface : "interface" <identifier> ";" ;

c_pp_line         : /#[^\n]*/ ;
c_line_comment    : /\/\/[^\n]*/ ;
c_block_comment   : /\/\*([^*]|\*+[^*\/])*\*+\// ;
c_comment         : <c_line_comment> | <c_block_comment> ;

c_decl_line       : /(?![[:space:]]*(class|interface)\b)
                    (?![[:space:]]*typedef[[:space:]]+(class|interface)\b)
                    [^\n;]*;/ ;

c_decl_like       : /(?![[:space:]]*(class|interface)\b)
                    (?![[:space:]]*typedef[[:space:]]+(class|interface)\b)
                    [^;{}]+[;{}]/ ;

c_chunk           : <c_pp_line> | <c_comment> | <c_decl_line> | <c_decl_like> ;
