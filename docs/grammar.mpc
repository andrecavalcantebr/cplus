ws            : /([[:space:]]|\/\/[^\n]*|\/\*([^*]|\*+[^*\/])*\*+\/)*/ ;
letter        : /[A-Za-z_]/ ;
digit         : /[0-9]/ ;
identifier    : <letter> /[A-Za-z0-9_]*/ ;

kw_interface  : "interface" ;
kw_class      : "class" ;
kw_public     : "public" ;
kw_private    : "private" ;
kw_protected  : "protected" ;

lbrace        : "{" ;
rbrace        : "}" ;
semi          : ";" ;
colon         : ":" ;
lparen        : "(" ;
rparen        : ")" ;
langle        : "<" ;
rangle        : ">" ;
comma         : "," ;

type_name     : <identifier> ;
type_args     : <langle> <ws> <type_name> (<ws> <comma> <ws> <type_name>)* <ws> <rangle> ;
type          : <type_name> (<ws> <type_args>)? ;

param         : <type> <ws> <identifier> ;
param_list    : <param> (<ws> <comma> <ws> <param>)* ;
param_list_opt: (<param_list>)? ;

method_name   : <identifier> ;
method_decl   : <type> <ws> <method_name> <ws> <lparen> <ws> <param_list_opt> <ws> <rparen> <ws> <semi> ;

field_decl    : <type> <ws> <identifier> <ws> <semi> ;
member        : <method_decl> | <field_decl> ;

access_kw     : <kw_public> | <kw_private> | <kw_protected> ;
section       : <access_kw> <ws> <colon> <ws> <member>* ;

interface     : <kw_interface> <ws> <identifier> <ws>
                <lbrace> <ws>
                  (<kw_public> <ws> <colon> <ws>)?
                  <method_decl>* <ws>
                <rbrace> <ws> <semi> ;

class         : <kw_class> <ws> <identifier> <ws>
                <lbrace> <ws>
                  (<section> | <member>)* <ws>
                <rbrace> <ws> <semi> ;

program       : <ws> (<interface> | <class>)+ <ws> ;
